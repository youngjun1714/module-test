// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game/betting.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Betting struct {
	FromAddress string                                   `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	Betting     string                                   `protobuf:"bytes,2,opt,name=betting,proto3" json:"betting,omitempty" yaml:"betting"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *Betting) Reset()         { *m = Betting{} }
func (m *Betting) String() string { return proto.CompactTextString(m) }
func (*Betting) ProtoMessage()    {}
func (*Betting) Descriptor() ([]byte, []int) {
	return fileDescriptor_118b4c3ab00a3014, []int{0}
}
func (m *Betting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Betting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Betting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Betting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Betting.Merge(m, src)
}
func (m *Betting) XXX_Size() int {
	return m.Size()
}
func (m *Betting) XXX_DiscardUnknown() {
	xxx_messageInfo_Betting.DiscardUnknown(m)
}

var xxx_messageInfo_Betting proto.InternalMessageInfo

func (m *Betting) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Betting) GetBetting() string {
	if m != nil {
		return m.Betting
	}
	return ""
}

func (m *Betting) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type TotalBettingInfo struct {
	Info []*BettingInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty" yaml:"amount"`
}

func (m *TotalBettingInfo) Reset()         { *m = TotalBettingInfo{} }
func (m *TotalBettingInfo) String() string { return proto.CompactTextString(m) }
func (*TotalBettingInfo) ProtoMessage()    {}
func (*TotalBettingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_118b4c3ab00a3014, []int{1}
}
func (m *TotalBettingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalBettingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalBettingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalBettingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalBettingInfo.Merge(m, src)
}
func (m *TotalBettingInfo) XXX_Size() int {
	return m.Size()
}
func (m *TotalBettingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalBettingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TotalBettingInfo proto.InternalMessageInfo

func (m *TotalBettingInfo) GetInfo() []*BettingInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type BettingInfo struct {
	Amount      int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
}

func (m *BettingInfo) Reset()         { *m = BettingInfo{} }
func (m *BettingInfo) String() string { return proto.CompactTextString(m) }
func (*BettingInfo) ProtoMessage()    {}
func (*BettingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_118b4c3ab00a3014, []int{2}
}
func (m *BettingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BettingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BettingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BettingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BettingInfo.Merge(m, src)
}
func (m *BettingInfo) XXX_Size() int {
	return m.Size()
}
func (m *BettingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BettingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BettingInfo proto.InternalMessageInfo

func (m *BettingInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *BettingInfo) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Betting)(nil), "game.gamemodule.Betting")
	proto.RegisterType((*TotalBettingInfo)(nil), "game.gamemodule.TotalBettingInfo")
	proto.RegisterType((*BettingInfo)(nil), "game.gamemodule.BettingInfo")
}

func init() { proto.RegisterFile("game/betting.proto", fileDescriptor_118b4c3ab00a3014) }

var fileDescriptor_118b4c3ab00a3014 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6a, 0xdb, 0x40,
	0x18, 0x94, 0xec, 0x62, 0xd3, 0x75, 0x7f, 0xd5, 0x42, 0x55, 0x53, 0x24, 0xa3, 0x93, 0x0b, 0xf5,
	0xae, 0xd5, 0x16, 0x0a, 0xbe, 0x55, 0x3e, 0xb5, 0x47, 0x51, 0x28, 0xe4, 0x12, 0xf4, 0xb3, 0x56,
	0x94, 0x58, 0xfb, 0x19, 0xef, 0x2a, 0xc4, 0x6f, 0x91, 0xe7, 0xc8, 0x93, 0xf8, 0xe8, 0xa3, 0x4f,
	0x4a, 0xb0, 0xdf, 0xc0, 0x4f, 0x10, 0xb4, 0xbb, 0x09, 0x22, 0xc9, 0x21, 0x17, 0x49, 0x9f, 0xbe,
	0x99, 0xd1, 0xcc, 0x68, 0x91, 0x95, 0x45, 0x05, 0x25, 0x31, 0x15, 0x22, 0x67, 0x19, 0x5e, 0x2c,
	0x41, 0x80, 0xf5, 0xb6, 0x7e, 0x87, 0xeb, 0x4b, 0x01, 0x69, 0x39, 0xa7, 0xfd, 0x8f, 0x19, 0x64,
	0x20, 0x77, 0xa4, 0x7e, 0x52, 0xb0, 0xbe, 0x93, 0x00, 0x2f, 0x80, 0x93, 0x38, 0xe2, 0x94, 0x9c,
	0xfb, 0x31, 0x15, 0x91, 0x4f, 0x12, 0xc8, 0x99, 0xda, 0x7b, 0x5b, 0x13, 0x75, 0x03, 0x25, 0x6c,
	0x4d, 0xd0, 0xab, 0xd9, 0x12, 0x8a, 0xe3, 0x28, 0x4d, 0x97, 0x94, 0x73, 0xdb, 0x1c, 0x98, 0xc3,
	0x97, 0xc1, 0xa7, 0x43, 0xe5, 0x7e, 0x58, 0x45, 0xc5, 0x7c, 0xe2, 0x35, 0xb7, 0x5e, 0xd8, 0xab,
	0xc7, 0xdf, 0x6a, 0xb2, 0xbe, 0xa1, 0xae, 0xf6, 0x67, 0xb7, 0x24, 0xcd, 0x3a, 0x54, 0xee, 0x1b,
	0x45, 0xd3, 0x0b, 0x2f, 0xbc, 0x83, 0x58, 0x09, 0xea, 0x44, 0x05, 0x94, 0x4c, 0xd8, 0xed, 0x41,
	0x7b, 0xd8, 0xfb, 0xfe, 0x19, 0x2b, 0x9b, 0xb8, 0xb6, 0x89, 0xb5, 0x4d, 0x3c, 0x85, 0x9c, 0x05,
	0xe3, 0x75, 0xe5, 0x1a, 0x57, 0xd7, 0xee, 0x30, 0xcb, 0xc5, 0x49, 0x19, 0xe3, 0x04, 0x0a, 0xa2,
	0x33, 0xa9, 0xdb, 0x88, 0xa7, 0x67, 0x44, 0xac, 0x16, 0x94, 0x4b, 0x02, 0x0f, 0xb5, 0xb4, 0xf7,
	0x1f, 0xbd, 0xfb, 0x07, 0x22, 0x9a, 0xeb, 0x78, 0x7f, 0xd8, 0x0c, 0xac, 0x29, 0x7a, 0x91, 0xb3,
	0x19, 0xd8, 0xa6, 0xfc, 0xec, 0x17, 0xfc, 0xa0, 0x44, 0xdc, 0xc0, 0x06, 0xef, 0x0f, 0x95, 0xfb,
	0x5a, 0x25, 0xd0, 0x8a, 0xa1, 0x24, 0x7b, 0x02, 0xf5, 0x9a, 0x9a, 0x5f, 0xef, 0xc3, 0xd4, 0x85,
	0xb5, 0x9f, 0xe2, 0x69, 0xc0, 0xa3, 0x86, 0x5b, 0xcf, 0x6f, 0x38, 0xf8, 0xbb, 0xde, 0x39, 0xe6,
	0x66, 0xe7, 0x98, 0x37, 0x3b, 0xc7, 0xbc, 0xdc, 0x3b, 0xc6, 0x66, 0xef, 0x18, 0xdb, 0xbd, 0x63,
	0x1c, 0x8d, 0x1b, 0xd5, 0xac, 0xa0, 0x64, 0xd9, 0x69, 0xc9, 0xfc, 0x5f, 0xfe, 0x4f, 0xa2, 0x42,
	0x8d, 0x04, 0xe5, 0x82, 0x5c, 0x10, 0x79, 0x88, 0x64, 0x51, 0x71, 0x47, 0xfe, 0xfc, 0x1f, 0xb7,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0xe8, 0x26, 0x40, 0x59, 0x02, 0x00, 0x00,
}

func (m *Betting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Betting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Betting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBetting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Betting) > 0 {
		i -= len(m.Betting)
		copy(dAtA[i:], m.Betting)
		i = encodeVarintBetting(dAtA, i, uint64(len(m.Betting)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBetting(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalBettingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalBettingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalBettingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBetting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BettingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BettingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BettingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintBetting(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintBetting(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBetting(dAtA []byte, offset int, v uint64) int {
	offset -= sovBetting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Betting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBetting(uint64(l))
	}
	l = len(m.Betting)
	if l > 0 {
		n += 1 + l + sovBetting(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBetting(uint64(l))
		}
	}
	return n
}

func (m *TotalBettingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovBetting(uint64(l))
		}
	}
	return n
}

func (m *BettingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovBetting(uint64(m.Amount))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovBetting(uint64(l))
	}
	return n
}

func sovBetting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBetting(x uint64) (n int) {
	return sovBetting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Betting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBetting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Betting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Betting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betting = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBetting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBetting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBetting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalBettingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBetting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalBettingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalBettingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBetting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &BettingInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBetting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBetting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BettingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBetting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BettingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BettingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBetting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBetting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBetting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBetting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBetting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBetting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBetting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBetting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBetting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBetting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBetting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBetting = fmt.Errorf("proto: unexpected end of group")
)
