// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTotalBettingRequest struct {
}

func (m *QueryTotalBettingRequest) Reset()         { *m = QueryTotalBettingRequest{} }
func (m *QueryTotalBettingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBettingRequest) ProtoMessage()    {}
func (*QueryTotalBettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{0}
}
func (m *QueryTotalBettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBettingRequest.Merge(m, src)
}
func (m *QueryTotalBettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBettingRequest proto.InternalMessageInfo

type QueryTotalBettingResponse struct {
	ResInfo TotalResInfo `protobuf:"bytes,1,opt,name=ResInfo,proto3" json:"ResInfo"`
}

func (m *QueryTotalBettingResponse) Reset()         { *m = QueryTotalBettingResponse{} }
func (m *QueryTotalBettingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalBettingResponse) ProtoMessage()    {}
func (*QueryTotalBettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{1}
}
func (m *QueryTotalBettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalBettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalBettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalBettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalBettingResponse.Merge(m, src)
}
func (m *QueryTotalBettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalBettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalBettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalBettingResponse proto.InternalMessageInfo

func (m *QueryTotalBettingResponse) GetResInfo() TotalResInfo {
	if m != nil {
		return m.ResInfo
	}
	return TotalResInfo{}
}

type TotalResInfo struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *TotalResInfo) Reset()         { *m = TotalResInfo{} }
func (m *TotalResInfo) String() string { return proto.CompactTextString(m) }
func (*TotalResInfo) ProtoMessage()    {}
func (*TotalResInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{2}
}
func (m *TotalResInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalResInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalResInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalResInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalResInfo.Merge(m, src)
}
func (m *TotalResInfo) XXX_Size() int {
	return m.Size()
}
func (m *TotalResInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalResInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TotalResInfo proto.InternalMessageInfo

func (m *TotalResInfo) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type QueryOddsBettingRequest struct {
}

func (m *QueryOddsBettingRequest) Reset()         { *m = QueryOddsBettingRequest{} }
func (m *QueryOddsBettingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOddsBettingRequest) ProtoMessage()    {}
func (*QueryOddsBettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{3}
}
func (m *QueryOddsBettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOddsBettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOddsBettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOddsBettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOddsBettingRequest.Merge(m, src)
}
func (m *QueryOddsBettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOddsBettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOddsBettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOddsBettingRequest proto.InternalMessageInfo

type QueryOddsBettingResponse struct {
	OddsInfo TotalBettingInfo `protobuf:"bytes,1,opt,name=OddsInfo,proto3" json:"OddsInfo"`
}

func (m *QueryOddsBettingResponse) Reset()         { *m = QueryOddsBettingResponse{} }
func (m *QueryOddsBettingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOddsBettingResponse) ProtoMessage()    {}
func (*QueryOddsBettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{4}
}
func (m *QueryOddsBettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOddsBettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOddsBettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOddsBettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOddsBettingResponse.Merge(m, src)
}
func (m *QueryOddsBettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOddsBettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOddsBettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOddsBettingResponse proto.InternalMessageInfo

func (m *QueryOddsBettingResponse) GetOddsInfo() TotalBettingInfo {
	if m != nil {
		return m.OddsInfo
	}
	return TotalBettingInfo{}
}

type QueryEvensBettingRequest struct {
}

func (m *QueryEvensBettingRequest) Reset()         { *m = QueryEvensBettingRequest{} }
func (m *QueryEvensBettingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEvensBettingRequest) ProtoMessage()    {}
func (*QueryEvensBettingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{5}
}
func (m *QueryEvensBettingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEvensBettingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEvensBettingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEvensBettingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEvensBettingRequest.Merge(m, src)
}
func (m *QueryEvensBettingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEvensBettingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEvensBettingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEvensBettingRequest proto.InternalMessageInfo

type QueryEvensBettingResponse struct {
	EvensInfo TotalBettingInfo `protobuf:"bytes,1,opt,name=EvensInfo,proto3" json:"EvensInfo"`
}

func (m *QueryEvensBettingResponse) Reset()         { *m = QueryEvensBettingResponse{} }
func (m *QueryEvensBettingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEvensBettingResponse) ProtoMessage()    {}
func (*QueryEvensBettingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba210adeee9ee5e5, []int{6}
}
func (m *QueryEvensBettingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEvensBettingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEvensBettingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEvensBettingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEvensBettingResponse.Merge(m, src)
}
func (m *QueryEvensBettingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEvensBettingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEvensBettingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEvensBettingResponse proto.InternalMessageInfo

func (m *QueryEvensBettingResponse) GetEvensInfo() TotalBettingInfo {
	if m != nil {
		return m.EvensInfo
	}
	return TotalBettingInfo{}
}

func init() {
	proto.RegisterType((*QueryTotalBettingRequest)(nil), "game.gamemodule.QueryTotalBettingRequest")
	proto.RegisterType((*QueryTotalBettingResponse)(nil), "game.gamemodule.QueryTotalBettingResponse")
	proto.RegisterType((*TotalResInfo)(nil), "game.gamemodule.TotalResInfo")
	proto.RegisterType((*QueryOddsBettingRequest)(nil), "game.gamemodule.QueryOddsBettingRequest")
	proto.RegisterType((*QueryOddsBettingResponse)(nil), "game.gamemodule.QueryOddsBettingResponse")
	proto.RegisterType((*QueryEvensBettingRequest)(nil), "game.gamemodule.QueryEvensBettingRequest")
	proto.RegisterType((*QueryEvensBettingResponse)(nil), "game.gamemodule.QueryEvensBettingResponse")
}

func init() { proto.RegisterFile("game/query.proto", fileDescriptor_ba210adeee9ee5e5) }

var fileDescriptor_ba210adeee9ee5e5 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0xf5, 0x11, 0x08, 0xb0, 0x46, 0x02, 0x96, 0x48, 0xd8, 0x27, 0xb8, 0x84, 0xab, 0x1c, 0xa4,
	0xec, 0xc6, 0x06, 0x89, 0x8a, 0xc6, 0x51, 0x0a, 0x68, 0x10, 0x16, 0x55, 0x1a, 0x74, 0xe7, 0x5b,
	0x96, 0x03, 0xdf, 0x8e, 0x93, 0xdd, 0x8b, 0x70, 0x41, 0x01, 0x1f, 0x80, 0x90, 0xf8, 0x0b, 0xbe,
	0x24, 0x65, 0x24, 0x1a, 0x2a, 0x40, 0x36, 0x1f, 0x82, 0x76, 0x77, 0x12, 0x2e, 0xce, 0x59, 0xb2,
	0xd2, 0xd8, 0xd6, 0xcc, 0x7b, 0xf3, 0xe6, 0xbd, 0x1d, 0x93, 0x5b, 0x32, 0x29, 0x04, 0xdf, 0x2f,
	0xc5, 0xc1, 0x84, 0x8d, 0x0f, 0xc0, 0x00, 0xbd, 0x69, 0x2b, 0xcc, 0x7e, 0x14, 0x90, 0x95, 0x23,
	0x11, 0xae, 0x49, 0x90, 0xe0, 0x7a, 0xdc, 0xfe, 0xf2, 0xb0, 0xf0, 0x9e, 0x04, 0x90, 0x23, 0xc1,
	0x93, 0x71, 0xce, 0x13, 0xa5, 0xc0, 0x24, 0x26, 0x07, 0xa5, 0xb1, 0x4b, 0xdd, 0xd8, 0x54, 0x18,
	0x93, 0x2b, 0x89, 0xb5, 0x68, 0x08, 0xba, 0x00, 0xcd, 0xd3, 0x44, 0x0b, 0x7e, 0xd8, 0x4d, 0x85,
	0x49, 0xba, 0x7c, 0x08, 0xb9, 0xf2, 0xfd, 0x38, 0x24, 0xad, 0x97, 0x76, 0x8f, 0x57, 0x60, 0x92,
	0x51, 0xdf, 0x53, 0x07, 0x62, 0xbf, 0x14, 0xda, 0xc4, 0x7b, 0xa4, 0x5d, 0xd3, 0xd3, 0x63, 0x50,
	0x5a, 0xd0, 0xa7, 0xe4, 0xea, 0x40, 0xe8, 0x67, 0xea, 0x0d, 0xb4, 0x82, 0x8d, 0xa0, 0xd3, 0xec,
	0xdd, 0x67, 0x73, 0x1e, 0x98, 0xe3, 0x21, 0xa8, 0x7f, 0xf9, 0xe8, 0xd7, 0x7a, 0x63, 0x70, 0xc2,
	0x89, 0x35, 0xb9, 0x51, 0x6d, 0xd3, 0x21, 0x59, 0x4d, 0x0a, 0x28, 0x95, 0x69, 0x05, 0x1b, 0x2b,
	0x9d, 0x66, 0xaf, 0xcd, 0xfc, 0xe2, 0xcc, 0x2e, 0xce, 0x70, 0x71, 0xb6, 0x03, 0xb9, 0xea, 0x6f,
	0xdb, 0x49, 0xdf, 0x7f, 0xaf, 0x77, 0x64, 0x6e, 0xde, 0x96, 0x29, 0x1b, 0x42, 0xc1, 0xd1, 0xa5,
	0xff, 0xda, 0xd2, 0xd9, 0x7b, 0x6e, 0x26, 0x63, 0xa1, 0x1d, 0x41, 0x0f, 0x70, 0x74, 0xdc, 0x26,
	0x77, 0x9d, 0xa1, 0x17, 0x59, 0xa6, 0xe7, 0xbc, 0xbe, 0xc6, 0x1c, 0xce, 0xb4, 0xd0, 0xea, 0x0e,
	0xb9, 0x66, 0xcb, 0x15, 0xaf, 0x0f, 0xea, 0xbd, 0x22, 0xb1, 0xe2, 0xf7, 0x94, 0x78, 0x1a, 0xf4,
	0xee, 0xa1, 0x50, 0xf3, 0xe2, 0x29, 0x06, 0x7d, 0xb6, 0x87, 0xea, 0xbb, 0xe4, 0xba, 0xab, 0x5f,
	0x44, 0xfe, 0x3f, 0xb3, 0xf7, 0x65, 0x85, 0x5c, 0x71, 0x22, 0xf4, 0x53, 0x80, 0xd9, 0x23, 0x9e,
	0x6e, 0x9e, 0x1b, 0xb7, 0xe8, 0x24, 0xc2, 0x87, 0xcb, 0x40, 0xfd, 0xe2, 0x71, 0xf8, 0xf9, 0xc7,
	0xdf, 0x6f, 0x97, 0xd6, 0x28, 0xe5, 0xee, 0x2e, 0x8d, 0xc5, 0xe0, 0x71, 0xd2, 0x8f, 0xa4, 0x59,
	0x49, 0x9a, 0x76, 0xea, 0xc7, 0x9e, 0x7f, 0xa7, 0x70, 0x73, 0x09, 0x24, 0xea, 0xb7, 0x9d, 0xfe,
	0x1d, 0x7a, 0xdb, 0xeb, 0x43, 0x96, 0xe9, 0x13, 0x79, 0x1b, 0x41, 0x35, 0xec, 0x45, 0x11, 0xd4,
	0x3c, 0xd6, 0xa2, 0x08, 0xea, 0xde, 0x6e, 0x3e, 0x02, 0x61, 0x31, 0xb8, 0x43, 0xff, 0xf9, 0xd1,
	0x34, 0x0a, 0x8e, 0xa7, 0x51, 0xf0, 0x67, 0x1a, 0x05, 0x5f, 0x67, 0x51, 0xe3, 0x78, 0x16, 0x35,
	0x7e, 0xce, 0xa2, 0xc6, 0xde, 0x76, 0xe5, 0xb0, 0x27, 0x50, 0x2a, 0xf9, 0xae, 0x54, 0xdd, 0x27,
	0xdd, 0xc7, 0xdc, 0xeb, 0x6d, 0x19, 0xa1, 0x0d, 0xff, 0x80, 0xa9, 0xda, 0x33, 0x4f, 0x57, 0xdd,
	0x9f, 0xf9, 0xd1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x37, 0xeb, 0xf1, 0x59, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	TotalBetting(ctx context.Context, in *QueryTotalBettingRequest, opts ...grpc.CallOption) (*QueryTotalBettingResponse, error)
	OddsBetting(ctx context.Context, in *QueryOddsBettingRequest, opts ...grpc.CallOption) (*QueryOddsBettingResponse, error)
	EvensBetting(ctx context.Context, in *QueryEvensBettingRequest, opts ...grpc.CallOption) (*QueryEvensBettingResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TotalBetting(ctx context.Context, in *QueryTotalBettingRequest, opts ...grpc.CallOption) (*QueryTotalBettingResponse, error) {
	out := new(QueryTotalBettingResponse)
	err := c.cc.Invoke(ctx, "/game.gamemodule.Query/TotalBetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OddsBetting(ctx context.Context, in *QueryOddsBettingRequest, opts ...grpc.CallOption) (*QueryOddsBettingResponse, error) {
	out := new(QueryOddsBettingResponse)
	err := c.cc.Invoke(ctx, "/game.gamemodule.Query/OddsBetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EvensBetting(ctx context.Context, in *QueryEvensBettingRequest, opts ...grpc.CallOption) (*QueryEvensBettingResponse, error) {
	out := new(QueryEvensBettingResponse)
	err := c.cc.Invoke(ctx, "/game.gamemodule.Query/EvensBetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	TotalBetting(context.Context, *QueryTotalBettingRequest) (*QueryTotalBettingResponse, error)
	OddsBetting(context.Context, *QueryOddsBettingRequest) (*QueryOddsBettingResponse, error)
	EvensBetting(context.Context, *QueryEvensBettingRequest) (*QueryEvensBettingResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TotalBetting(ctx context.Context, req *QueryTotalBettingRequest) (*QueryTotalBettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalBetting not implemented")
}
func (*UnimplementedQueryServer) OddsBetting(ctx context.Context, req *QueryOddsBettingRequest) (*QueryOddsBettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OddsBetting not implemented")
}
func (*UnimplementedQueryServer) EvensBetting(ctx context.Context, req *QueryEvensBettingRequest) (*QueryEvensBettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvensBetting not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TotalBetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalBettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalBetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.gamemodule.Query/TotalBetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalBetting(ctx, req.(*QueryTotalBettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OddsBetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOddsBettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OddsBetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.gamemodule.Query/OddsBetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OddsBetting(ctx, req.(*QueryOddsBettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EvensBetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEvensBettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EvensBetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.gamemodule.Query/EvensBetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EvensBetting(ctx, req.(*QueryEvensBettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "game.gamemodule.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TotalBetting",
			Handler:    _Query_TotalBetting_Handler,
		},
		{
			MethodName: "OddsBetting",
			Handler:    _Query_OddsBetting_Handler,
		},
		{
			MethodName: "EvensBetting",
			Handler:    _Query_EvensBetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/query.proto",
}

func (m *QueryTotalBettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalBettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalBettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalBettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ResInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TotalResInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalResInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalResInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOddsBettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOddsBettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOddsBettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOddsBettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOddsBettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOddsBettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OddsInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEvensBettingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEvensBettingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEvensBettingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEvensBettingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEvensBettingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEvensBettingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EvensInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTotalBettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalBettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ResInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *TotalResInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOddsBettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOddsBettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OddsInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEvensBettingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEvensBettingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EvensInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTotalBettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalBettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalBettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalBettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalResInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalResInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalResInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOddsBettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOddsBettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOddsBettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOddsBettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOddsBettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOddsBettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OddsInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEvensBettingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEvensBettingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEvensBettingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEvensBettingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEvensBettingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEvensBettingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvensInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EvensInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
